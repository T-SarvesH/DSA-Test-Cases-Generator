# .github/workflows/azure-web-app-deploy.yml

name: Deploy Laravel-React App to Azure Web App

on:
  push:
    branches:
      - main # Adjust this to your primary branch (e.g., master, develop)
  workflow_dispatch: # Allows manual trigger from GitHub Actions tab

env:
  AZURE_WEBAPP_NAME: casecraft-app         # <<<<<<< IMPORTANT: REPLACE WITH YOUR AZURE APP SERVICE NAME >>>>>>>
  PHP_VERSION: '8.4'                      # Ensure this matches your App Service runtime (e.g., '8.4', '8.3')
  NODE_VERSION: '22'                      # Node.js LTS version for React build (e.g., '18', '20')

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        # Add any other PHP extensions your app needs beyond the default
        extensions: pdo_sqlite, gd, exif, bcmath, mbstring # Common extensions, adjust as needed
        tools: composer
        ini-values: post_max_size=100M, upload_max_filesize=100M # Example INI values if needed

    - name: Install Composer Dependencies
      # --no-dev: Skip development dependencies
      # --optimize-autoloader: Generate an optimized autoloader for production
      run: composer install --no-dev --optimize-autoloader

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm' # Cache node modules for faster builds

    - name: Install Frontend Dependencies and Build
      # This assumes your npm run build script correctly outputs to public/build
      run: |
        npm install
        npm run build

    - name: 'Deploy to Azure Web App'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'production' # Keep as 'production' unless you use deployment slots
        # This secret must be configured in your GitHub repository settings
        # (Settings -> Secrets and variables -> Actions -> New repository secret)
        # The value comes from your Azure App Service's Publish Profile
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        # This will deploy the entire contents of the current directory (your repo root)
        # to the /home/site/wwwroot/ directory on your App Service.
        # This includes your public/build, vendor/, and database/ directories.
        package: .
